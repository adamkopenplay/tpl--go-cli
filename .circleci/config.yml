# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

defaults: &defaults
  machine:
    image: ubuntu-2004:202107-02
  environment:
    DOCKER_BUILDKIT: 1
    BUILDX_PLATFORMS: linux/amd64,linux/arm64

commands:
  setup_aws:
    steps:
      - run:
          name: Setup AWS Access
          command: |
            token_file=$(mktemp)
            aws configure set region $AWS_REGION
            aws configure set role_arn $AWS_ROLE_ARN
            aws configure set role_session_name $CIRCLE_WORKFLOW_JOB_ID
            aws configure set web_identity_token_file $token_file
            echo $CIRCLE_OIDC_TOKEN > $token_file

  buildx:
    parameters:
      version:
        type: string
    steps:
      - setup_aws
      - checkout
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64"

            curl --output docker-buildx \
            --silent --show-error --location --fail --retry 3 \
            "$BUILDX_BINARY_URL"

            mkdir -p ~/.docker/cli-plugins

            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx

            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password | docker login -u AWS --password-stdin $AWS_ECR_REGISTRY
      - run:
          name: "Create builder"
          command: docker buildx create --use --name build --node build --driver-opt network=host
      - run:
          name: "Build and push image"
          command: BUILD_VERSION=<<parameters.version>> make buildx


jobs:
  run-tests:
    environment:
      # Need to disable this in alpine image for tests
      CGO_ENABLED: "0"
    docker:
      - image: golang:1.18-alpine
    steps:
      - run:
          name: "Install git"
          command: apk add git
      - checkout
      - run:
          name: "Run tests"
          # We can probably use the cover profile in circleci (at some point)
          # To keep track of coverage and such
          command: |
            mkdir /tmp/artifacts
            go test -coverprofile test/coverage.out ./...
            go tool cover -html=test/coverage.out -o /tmp/artifacts/coverage.html
      - store_artifacts:
          path: /tmp/artifacts

  build-and-push-pr:
    <<: *defaults
    steps:
      - buildx:
          version: $CIRCLE_SHA1

  build-and-push-tag:
    <<: *defaults
    steps:
      - buildx:
          version: $CIRCLE_TAG

workflows:
  build-and-push-test-image:
    jobs:
      - run-tests:
          filters:
            branches:
              ignore:
                - "main"
      - build-and-push-pr:
          context: ecr
          requires:
            - run-tests
          filters:
            branches:
              ignore:
                - "main"

  publish_image:
    jobs:
      - build-and-push-tag:
          context: ecr
          filters:
            branches:
              ignore:
                - "/.*/"
            tags:
              only:
                - '/[0-9]+\.[0-9]+\.[0-9]+/'

